
// This file is generated by a python parser, because I don't know how to read a config file during utools runtime.
// Date 2023-09-25 21:46:01
    

const macos = require('./json/macos.js')
const windows = require('./json/windows.js')
const magnet_macos = require('./json/magnet_macos.js')
const tmux = require('./json/tmux.js')
const vim = require('./json/vim.js')

const template_obsidian = require('./json/macwin/obsidian.js')

updatePlaceHolder = (val) => {
    let newVal = val
    if (val.includes('{cmd_or_ctrl}')) {
        if (utools.isMacOs()) {
            newVal = val.replace(/{cmd_or_ctrl}/g, 'command')
        }
        else if (utools.isWindows()) {
            newVal = val.replace(/{cmd_or_ctrl}/g, 'ctrl')
        }
    }
    val = newVal
    if (val.includes('{opt_or_alt}')) {
        if (utools.isMacOs()) {
            newVal = val.replace(/{opt_or_alt}/g, 'option')
        }
        else if (utools.isWindows()) {
            newVal = val.replace(/{opt_or_alt}/g, 'alt')
        }
    }
    return newVal
}

function handleArr(arr) {
    for (let i = 0; i < arr.length; i++) {
        if (Array.isArray(arr[i])) {
            handleArr(arr[i]);
        } else {
            let val = arr[i]
            arr[i] = updatePlaceHolder(val)
        }
    }
}

handleTemplate = (arr) => {
    arr.forEach(x => {
        for (key in x) {
            if (Array.isArray(x[key])) {
                handleArr(x[key])
            }
            else {
                x[key] = updatePlaceHolder(x[key])
            }
        }
    })
}

let shortcutTable = {
    macos: macos,
    windows: windows,
    magnet_macos: magnet_macos,
    tmux: tmux,
    vim: vim,
    template_obsidian: template_obsidian,
}


const fs = require('fs');
const path = require('path');

let loaded = []
function requireAll(directory) {
    const files = fs.readdirSync(directory)
    for(let file of files) {
        const filePath = path.join(directory, file);
        const stat = fs.statSync(filePath);

        if (stat.isDirectory()) {
            // 递归加载子目录
            requireAll(filePath);
        } else if (path.basename(file) === 'shortcuts.js') {
            // 加载 .js 文件
            const sc = require(filePath);
            loaded = loaded.concat(sc)
        }
    }
}

// 调用函数，传入要加载的目录路径
requireAll(`${__dirname}/shortcuts`);  // 替换成你的目录
for(let k of loaded) {
    const name = k.name()
    console.log(`${name}`)
    var sc = k.get()
    if (sc.length !== 0) {
        shortcutTable[name] = sc
    }
}

let shortcuts = []
for (k in shortcutTable) {
    if (k.includes('template')) {
        if (!utools.isMacOs() && !utools.isWindows()) {
            continue
        }
        handleTemplate(shortcutTable[k])
    }
    else {
        if (utools.isMacOs()) {
            if (k.includes('windows')) {
                continue
            }
        }
        else if (utools.isWindows()) {
            if (k.includes('macos')) {
                continue
            }
        }
    }
    shortcuts = shortcuts.concat(shortcutTable[k])
}

module.exports = shortcuts